<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
    namespace="com.mycollab.module.project.dao.ProjectGenericTaskMapper">
    <resultMap id="BaseResultMap"
        type="com.mycollab.module.project.domain.ProjectGenericTask">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="description" jdbcType="VARCHAR" property="description" />
        <result column="assignUser" jdbcType="VARCHAR" property="assignUser" />
        <result column="assignUserFullName" jdbcType="VARCHAR" property="assignUserFullName" />
        <result column="assignUserAvatarId" jdbcType="VARCHAR" property="assignUserAvatarId" />
        <result column="dueDate" jdbcType="TIMESTAMP" property="dueDate" />
        <result column="projectId" jdbcType="INTEGER" property="projectId" />
        <result column="projectName" jdbcType="VARCHAR" property="projectName" />
        <result column="projectShortName" jdbcType="VARCHAR" property="projectShortName" />
        <result column="type" jdbcType="VARCHAR" property="type" />
        <result column="typeId" jdbcType="INTEGER" property="typeId" />
        <result column="extraTypeId" jdbcType="INTEGER" property="extraTypeId" />
        <result column="status" jdbcType="VARCHAR" property="status" />
        <result column="lastUpdatedTime" jdbcType="TIMESTAMP" property="lastUpdatedTime" />
        <result column="sAccountId" jdbcType="INTEGER" property="sAccountId" />
        <result column="billableHours" property="billableHours" jdbcType="DOUBLE"/>
        <result column="nonBillableHours" property="nonBillableHours" jdbcType="DOUBLE"/>
        <result column="startDate" jdbcType="TIMESTAMP" property="startDate" />
        <result column="endDate" jdbcType="TIMESTAMP" property="endDate" />
    </resultMap>

    <resultMap id="BaseResultTaskCountMap"
        type="com.mycollab.module.project.domain.ProjectGenericTaskCount">
        <result column="assignUser" jdbcType="VARCHAR" property="assignUser" />
        <result column="assignUserFullName" jdbcType="VARCHAR" property="assignUserFullName" />
        <result column="projectId" jdbcType="INTEGER" property="projectId" />
        <result column="projectName" jdbcType="VARCHAR" property="projectName" />
        <result column="taskCount" jdbcType="INTEGER" property="taskCount" />
    </resultMap>

    <sql id="queryRiskSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} m_prj_risk.riskname LIKE '%${searchCriteria.name.value}%'
        #end
        
        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} m_prj_risk.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.projectIds)
            ${searchCriteria.projectIds.operation} m_prj_risk.projectId IN
            #repeat(${searchCriteria.projectIds.values} $projectId "," "(" ")")
                @{projectId}
            #end
        #end
        
        #ifnotnull($searchCriteria.assignUser)
            ${searchCriteria.assignUser.operation} m_prj_risk.assigntouser = @{searchCriteria.assignUser.value}
        #end
        
        #ifnotnull($searchCriteria.isOpenned)
            ${searchCriteria.isOpenned.operation} m_prj_risk.status NOT IN ('Closed')
        #end

        #ifnotnull($searchCriteria.dateInRange)
            ${searchCriteria.dateInRange.operation} ((m_prj_risk.datedue BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
              OR (m_prj_risk.startdate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
              OR (m_prj_risk.enddate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            )
        #end

        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} m_prj_risk.milestoneId = @{searchCriteria.milestoneId.value}
        #end

        #ifnotnull($searchCriteria.types)
            ${searchCriteria.types.operation} "Project-Risk" IN
            #repeat(${searchCriteria.types.values} $type "," "(" ")")
                @{type}
            #end
        #end

        #ifnotnull($searchCriteria.typeIds)
            ${searchCriteria.typeIds.operation} m_prj_risk.id IN
            #repeat(${searchCriteria.typeIds.values} $typeId "," "(" ")")
                @{typeId}
            #end
        #end
        
        #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation} CAST(m_prj_risk.datedue AS DATE ) ${searchCriteria.dueDate.comparison} @{searchCriteria.dueDate.value}
        #end
        ]]>
    </sql>

    <sql id="queryBugSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} m_tracker_bug.summary LIKE '%${searchCriteria.name.value}%'
        #end
        
        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} m_tracker_bug.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.projectIds)
            ${searchCriteria.projectIds.operation} m_tracker_bug.projectId IN
            #repeat(${searchCriteria.projectIds.values} $projectId "," "(" ")")
                @{projectId}
            #end
        #end
        
        #ifnotnull($searchCriteria.assignUser)
            ${searchCriteria.assignUser.operation} m_tracker_bug.assignuser = @{searchCriteria.assignUser.value}
        #end
        
        #ifnotnull($searchCriteria.isOpenned)
            ${searchCriteria.isOpenned.operation} m_tracker_bug.status NOT IN ('Verified')
        #end

        #ifnotnull($searchCriteria.dateInRange)
            ${searchCriteria.dateInRange.operation} ((m_tracker_bug.duedate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (m_tracker_bug.startdate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (m_tracker_bug.enddate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to}))
        #end

        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} m_tracker_bug.milestoneId = @{searchCriteria.milestoneId.value}
        #end

        #ifnotnull($searchCriteria.types)
            ${searchCriteria.types.operation} "Project-Bug" IN
            #repeat(${searchCriteria.types.values} $type "," "(" ")")
                @{type}
            #end
        #end

        #ifnotnull($searchCriteria.typeIds)
            ${searchCriteria.typeIds.operation} m_tracker_bug.id IN
            #repeat(${searchCriteria.typeIds.values} $typeId "," "(" ")")
                @{typeId}
            #end
        #end
        
         #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation} CAST(m_tracker_bug.duedate AS DATE ) ${searchCriteria.dueDate.comparison} @{searchCriteria.dueDate.value}
        #end
        ]]>
    </sql>

    <sql id="queryTaskSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} m_prj_task.taskname LIKE '%${searchCriteria.name.value}%'
        #end
        
        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} m_prj_task.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.projectIds)
            ${searchCriteria.projectIds.operation} m_prj_task.projectId IN
            #repeat(${searchCriteria.projectIds.values} $projectId "," "(" ")")
                @{projectId}
            #end
        #end
        
        #ifnotnull($searchCriteria.assignUser)
            ${searchCriteria.assignUser.operation} m_prj_task.assignUser = @{searchCriteria.assignUser.value}
        #end
        
        #ifnotnull($searchCriteria.isOpenned)
            ${searchCriteria.isOpenned.operation} m_prj_task.status NOT IN ('Closed')
        #end

        #ifnotnull($searchCriteria.dateInRange)
            ${searchCriteria.dateInRange.operation} ((m_prj_task.deadline BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (m_prj_task.startdate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (m_prj_task.enddate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to}))
        #end

        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} m_prj_task.milestoneId = @{searchCriteria.milestoneId.value}
        #end

        #ifnotnull($searchCriteria.types)
            ${searchCriteria.types.operation} "Project-Task" IN
            #repeat(${searchCriteria.types.values} $type "," "(" ")")
                @{type}
            #end
        #end

        #ifnotnull($searchCriteria.typeIds)
            ${searchCriteria.typeIds.operation} m_prj_task.id IN
            #repeat(${searchCriteria.typeIds.values} $typeId "," "(" ")")
                @{typeId}
            #end
        #end
        
        #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation} CAST(m_prj_task.deadline AS DATE) ${searchCriteria.dueDate.comparison} @{searchCriteria.dueDate.value}
        #end
        ]]>
    </sql>

    <sql id="queryMilestoneSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)

        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} m_prj_milestone.name LIKE '%${searchCriteria.name.value}%'
        #end

        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} m_prj_milestone.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end

        #ifnotnull($searchCriteria.projectIds)
            ${searchCriteria.projectIds.operation} m_prj_milestone.projectId IN
            #repeat(${searchCriteria.projectIds.values} $projectId "," "(" ")")
                @{projectId}
            #end
        #end

        #ifnotnull($searchCriteria.assignUser)
            ${searchCriteria.assignUser.operation} m_prj_milestone.owner = @{searchCriteria.assignUser.value}
        #end

        #ifnotnull($searchCriteria.isOpenned)
            ${searchCriteria.isOpenned.operation} m_prj_milestone.status NOT IN ('Closed')
        #end

        #ifnotnull($searchCriteria.dateInRange)
            ${searchCriteria.dateInRange.operation} ((m_prj_milestone.deadline BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (m_prj_milestone.startdate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (m_prj_milestone.enddate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to}))
        #end

        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} m_prj_milestone.id = @{searchCriteria.milestoneId.value}
        #end

        #ifnotnull($searchCriteria.types)
            ${searchCriteria.types.operation} "Project-Milestone" IN
            #repeat(${searchCriteria.types.values} $type "," "(" ")")
                @{type}
            #end
        #end

        #ifnotnull($searchCriteria.typeIds)
            ${searchCriteria.typeIds.operation} m_prj_milestone.id IN
            #repeat(${searchCriteria.typeIds.values} $typeId "," "(" ")")
                @{typeId}
            #end
        #end

        #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation} CAST(m_prj_milestone.enddate AS DATE) ${searchCriteria.dueDate.comparison} @{searchCriteria.dueDate.value}
        #end
        ]]>
    </sql>

    <sql id="selectGenericTaskFromRisk">
    <![CDATA[
          SELECT m_prj_risk.riskname AS name, m_prj_risk.description, m_prj_risk.assigntouser AS assignUser,
            concat(s_user.firstname, ' ', LTRIM(concat(IFNULL(s_user.middlename, ''), ' ')), s_user.lastname) AS assignUserFullName,
            s_user.avatarId as assignUserAvatarId,
            m_prj_risk.datedue AS dueDate, m_prj_risk.projectId AS projectId, m_prj_project.name AS projectName,
            m_prj_project.shortname AS projectShortName, NULL AS extraTypeId, m_prj_risk.status,
            'Project-Risk' AS type, m_prj_risk.id AS typeId, m_prj_risk.lastUpdatedTime AS lastUpdatedTime,
            m_prj_risk.sAccountId, m_prj_risk.startDate, m_prj_risk.endDate
                 
          FROM m_prj_risk
              LEFT OUTER JOIN s_user ON (m_prj_risk.assigntouser=s_user.username)
              LEFT OUTER JOIN m_prj_project ON (m_prj_risk.projectId=m_prj_project.id AND m_prj_project.projectStatus="Open")
        ]]>
    </sql>

    <sql id="selectGenericTaskFromMilestone">
        <![CDATA[
          SELECT m_prj_milestone.name AS name, m_prj_milestone.description AS description, m_prj_milestone.owner AS assignUser,
            concat(s_user.firstname, ' ', LTRIM(concat(IFNULL(s_user.middlename, ''), ' ')), s_user.lastname) AS assignUserFullName,
            s_user.avatarId as assignUserAvatarId,
            m_prj_milestone.enddate AS dueDate, m_prj_milestone.projectId AS projectId, m_prj_project.name AS projectName,
            m_prj_project.shortname AS projectShortName, NULL AS extraTypeId, m_prj_milestone.status,
            'Project-Milestone' AS type, m_prj_milestone.id AS typeId, m_prj_milestone.lastUpdatedTime AS lastUpdatedTime,
            m_prj_milestone.sAccountId, m_prj_milestone.startdate AS startDate, m_prj_milestone.enddate AS endDate

          FROM m_prj_milestone
            LEFT OUTER JOIN s_user ON (m_prj_milestone.owner=s_user.username)
            LEFT OUTER JOIN m_prj_project ON (m_prj_milestone.projectId=m_prj_project.id AND m_prj_project.projectStatus="Open")
        ]]>
    </sql>

    <sql id="selectGenericTaskFromBug">
    <![CDATA[
          SELECT m_tracker_bug.summary AS name, m_tracker_bug.description, m_tracker_bug.assignuser AS assignUser,
                concat(s_user.firstname, ' ', LTRIM(concat(IFNULL(s_user.middlename, ''), ' ')), s_user.lastname) AS assignUserFullName,
                s_user.avatarId as assignUserAvatarId,
                m_tracker_bug.duedate AS dueDate, m_tracker_bug.projectId AS projectId, m_prj_project.name AS projectName,
                m_prj_project.shortname AS projectShortName, m_tracker_bug.bugkey AS extraTypeId, m_tracker_bug.status,
                'Project-Bug' AS type, m_tracker_bug.id AS typeId, m_tracker_bug.lastUpdatedTime AS lastUpdatedTime,
                m_tracker_bug.sAccountId, m_tracker_bug.startdate AS startDate, m_tracker_bug.enddate AS endDate
                 
          FROM m_tracker_bug
              LEFT OUTER JOIN s_user ON (m_tracker_bug.assignuser=s_user.username)
              LEFT OUTER JOIN m_prj_project ON (m_tracker_bug.projectId=m_prj_project.id AND m_prj_project.projectStatus="Open")
        ]]>
    </sql>

    <sql id="selectGenericTaskFromTask">
        <![CDATA[
          SELECT m_prj_task.taskname AS name,  m_prj_task.notes AS description, m_prj_task.assignUser AS assignUser,
            concat(s_user.firstname, ' ', LTRIM(concat(IFNULL(s_user.middlename, ''), ' ')), s_user.lastname) AS assignUserFullName,
            s_user.avatarId as assignUserAvatarId,
            m_prj_task.deadline AS dueDate, m_prj_task.projectId AS projectId, m_prj_project.name AS projectName,
            m_prj_project.shortname AS projectShortName, m_prj_task.taskkey AS extraTypeId, m_prj_task.status,
            'Project-Task' AS type, m_prj_task.id AS typeId, m_prj_task.lastUpdatedTime AS lastUpdatedTime,
            m_prj_task.sAccountId, m_prj_task.startdate AS startDate, m_prj_task.enddate AS endDate
          
          FROM m_prj_task
            LEFT OUTER JOIN s_user ON (m_prj_task.assignUser=s_user.username)
            LEFT OUTER JOIN m_prj_project ON (m_prj_task.projectId=m_prj_project.id AND m_prj_project.projectStatus="Open")
        ]]>
    </sql>

    <select id="getTotalCountFromRisk" parameterType="ProjectGenericTaskSearchCriteria"
        resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_prj_risk
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryRiskSearchCriteria" />
            #end
        #end
    </select>

    <select id="getTotalCountFromBug" parameterType="ProjectGenericTaskSearchCriteria"
        resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_tracker_bug
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryBugSearchCriteria" />
            #end
        #end
    </select>

    <select id="getTotalCountFromTask" parameterType="ProjectGenericTaskSearchCriteria"
        resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_prj_task
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryTaskSearchCriteria" />
            #end
        #end
    </select>

    <select id="getTotalCountFromMilestone" parameterType="ProjectGenericTaskSearchCriteria"
            resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_prj_milestone
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryMilestoneSearchCriteria" />
            #end
        #end
    </select>

    <sql id="orderStatement">
        ORDER BY
          #ifnotnull($_parameter.searchCriteria.orderFields)
            #repeat(${_parameter.searchCriteria.orderFields} $orderField "" "" "")
              ${orderField.field} ${orderField.direction},
            #end
          #end
        lastUpdatedTime DESC
    </sql>

    <select id="findPagableListByCriteria" parameterType="ProjectGenericTaskSearchCriteria"
        resultMap="BaseResultMap" lang="velocity">

        (
        <include refid="selectGenericTaskFromRisk" />
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryRiskSearchCriteria" />
            #end
        #end
        )

        UNION

        (
        <include refid="selectGenericTaskFromBug" />
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryBugSearchCriteria" />
            #end
        #end
        )

        UNION
        (
        <include refid="selectGenericTaskFromTask" />
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryTaskSearchCriteria" />
            #end
        #end
        )
        UNION
        (
        <include refid="selectGenericTaskFromMilestone" />
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryMilestoneSearchCriteria" />
            #end
        #end
        )
        #ifnotnull($_parameter.searchCriteria)
            <include refid="orderStatement" />
        #end
    </select>

    <select id="getAccountsHasOverdueAssignments" parameterType="ProjectGenericTaskSearchCriteria" resultType="map" lang="velocity">
        SELECT s_account.id, s_account.subdomain
        FROM s_account
        WHERE
          EXISTS (
            SELECT * FROM m_tracker_bug
              #trimext("WHERE" "AND|OR")
                <include refid="queryBugSearchCriteria" />
              #end
              AND m_tracker_bug.sAccountId = s_account.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_task
              #trimext("WHERE" "AND|OR")
                <include refid="queryTaskSearchCriteria" />
              #end
              AND m_prj_task.sAccountId = s_account.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_milestone
              #trimext("WHERE" "AND|OR")
                <include refid="queryMilestoneSearchCriteria" />
              #end
              AND m_prj_milestone.sAccountId = s_account.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_risk
              #trimext("WHERE" "AND|OR")
                <include refid="queryRiskSearchCriteria" />
              #end
              AND m_prj_risk.sAccountId = s_account.id
          )
        ORDER BY s_account.id ASC
    </select>

    <select id="getProjectsHasOverdueAssignments" parameterType="ProjectGenericTaskSearchCriteria" resultType="Integer" lang="velocity">
        SELECT m_prj_project.id
        FROM m_prj_project
        WHERE
          EXISTS (
            SELECT * FROM m_tracker_bug
            #trimext("WHERE" "AND|OR")
              <include refid="queryBugSearchCriteria" />
            #end
            AND m_tracker_bug.projectId = m_prj_project.id) OR
          EXISTS (
            SELECT * FROM m_prj_task
            #trimext("WHERE" "AND|OR")
              <include refid="queryTaskSearchCriteria" />
            #end
            AND m_prj_task.projectId = m_prj_project.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_milestone
              #trimext("WHERE" "AND|OR")
                <include refid="queryMilestoneSearchCriteria" />
              #end
              AND m_prj_milestone.projectId = m_prj_project.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_risk
              #trimext("WHERE" "AND|OR")
                <include refid="queryRiskSearchCriteria" />
              #end
              AND m_prj_risk.projectId = m_prj_project.id
          )
    </select>
</mapper>