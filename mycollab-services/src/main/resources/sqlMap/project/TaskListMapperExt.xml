<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.esofthead.mycollab.module.project.dao.TaskListMapperExt">

    <resultMap id="SimpleTaskListResult"
        extends="com.esofthead.mycollab.module.project.dao.TaskListMapper.ResultMapWithBLOBs"
        type="com.esofthead.mycollab.module.project.domain.SimpleTaskList">

        <result column="milestoneName" jdbcType="VARCHAR"
            property="milestoneName" />

        <result column="percentageComplete" jdbcType="DOUBLE"
            property="percentageComplete" />

        <result column="numOpenTasks" jdbcType="INTEGER"
            property="numOpenTasks" />

        <result column="numAllTasks" jdbcType="INTEGER" property="numAllTasks" />

        <result column="numComments" property="numComments"
            jdbcType="INTEGER" />

        <result column="ownerAvatarId" jdbcType="VARCHAR"
            property="ownerAvatarId" />

        <result column="ownerFullName" jdbcType="VARCHAR"
            property="ownerFullName" />

        <result column="createdUserAvatarId" jdbcType="VARCHAR"
            property="createdUserAvatarId" />

        <result column="createdUserFullName" jdbcType="VARCHAR"
            property="createdUserFullName" />

        <result column="projectName" jdbcType="VARCHAR" property="projectName" />

        <collection property="subTasks" notNullColumn="id"
            ofType="com.esofthead.mycollab.module.project.domain.SimpleTask"
            resultMap="com.esofthead.mycollab.module.project.dao.TaskMapperExt.TaskResult"
            columnPrefix="subTask_" />
    </resultMap>

    <sql id="querySearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.id)
            ${searchCriteria.id.operation} m_prj_task_list.id ${searchCriteria.id.compareOperator} @{searchCriteria.id.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.projectId)
            ${searchCriteria.projectId.operation} m_prj_task_list.projectid = @{searchCriteria.projectId.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.status)
            ${searchCriteria.status.operation} m_prj_task_list.status = @{searchCriteria.status.value}
        #end
        
        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} m_prj_task_list.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.milestoneIds)
            ${searchCriteria.milestoneIds.operation}
            m_prj_task_list.milestoneId IN
            #repeat(${searchCriteria.milestoneIds.values} $milestoneid "," "(" ")")
                @{milestoneid}
            #end
        #end
        ]]>
    </sql>

    <sql id="selectTaskList">
        <![CDATA[SELECT m_prj_task_list.id, m_prj_task_list.name, m_prj_task_list.description, 
                    m_prj_task_list.projectid, m_prj_task_list.createdTime, m_prj_task_list.lastUpdatedTime, 
                    m_prj_task_list.sAccountId, m_prj_task_list.milestoneId, m_prj_task_list.groupIndex,
                    m_prj_task_list.owner, m_prj_task_list.status, m_prj_milestone.name AS milestoneName,
                    m_prj_task_list.createduser, createUserTbl.avatarId AS createdUserAvatarId,
                    concat(createUserTbl.firstname, ' ', LTRIM(concat(IFNULL(createUserTbl.middlename, ''), ' ')), createUserTbl.lastname) AS createdUserFullName,
                    s_user.avatarId AS ownerAvatarId,
                    concat(s_user.firstname, ' ', LTRIM(concat(IFNULL(s_user.middlename, ''), ' ')), s_user.lastname) AS ownerFullName,
                    m_prj_task.id AS subTask_id, m_prj_task.taskname AS subTask_taskname, m_prj_task.percentagecomplete AS subTask_percentagecomplete, 
                    m_prj_task.startdate AS subTask_startdate, m_prj_task.enddate AS subTask_enddate, m_prj_task.priority AS subTask_priority, 
                    m_prj_task.duration AS subTask_duration, m_prj_task.isestimated AS subTask_isestimated, m_prj_task.projectid AS subTask_projectid, 
                    m_prj_task.deadline AS subTask_deadline, m_prj_task.notes AS subTask_notes, m_prj_task.taskindex AS subTask_taskindex, 
                    m_prj_task.actualStartDate AS subTask_actualStartDate, m_prj_task.actualEndDate AS subTask_actualEndDate, m_prj_task.originalEstimate AS subTask_originalEstimate, 
                    m_prj_task.remainEstimate AS subTask_remainEstimate, m_prj_task.tasklistid AS subTask_tasklistid, 
                    m_prj_task.createdTime AS subTask_createdTime, m_prj_task.lastUpdatedTime AS subTask_lastUpdatedTime,
                    (SELECT COUNT(*) FROM m_prj_task AS subtask_tbl WHERE subtask_tbl.parentTaskId = m_prj_task.id) AS subTask_numSubTasks,
                    m_prj_task.assignUser AS subTask_assignUser, m_prj_task.sAccountId AS subTask_sAccountId, m_prj_task.status AS subTask_status,
                    m_prj_task.taskkey AS subTask_taskkey, taskUser.avatarId AS subTask_assignUserAvatarId, m_prj_project.shortname AS subTask_projectShortname,
                    concat(taskUser.firstname, ' ', LTRIM(concat(IFNULL(taskUser.middlename, ''), ' ')), taskUser.lastname) AS subTask_assignUserFullName,
                    (SELECT AVG(task.percentagecomplete) FROM m_prj_task AS task WHERE m_prj_task_list.id = task.tasklistid) AS percentageComplete,
                    (SELECT COUNT(task_all.id) FROM  m_prj_task AS task_all WHERE m_prj_task_list.id = task_all.tasklistid) AS numAllTasks,
                    (SELECT COUNT(task_open.id) FROM  m_prj_task AS task_open WHERE m_prj_task_list.id = task_open.tasklistid AND (task_open.status='Open')) AS numOpenTasks,
                    m_prj_project.name AS projectName
                    FROM m_prj_task_list
                        LEFT OUTER JOIN s_user ON (s_user.username = m_prj_task_list.owner)
                        LEFT OUTER JOIN s_user AS createUserTbl ON (createUserTbl.username = m_prj_task_list.createduser)
                        LEFT OUTER JOIN m_prj_project ON (m_prj_project.id=m_prj_task_list.projectid)
                        LEFT OUTER JOIN m_prj_milestone ON (m_prj_milestone.id = m_prj_task_list.milestoneId)
                        LEFT OUTER JOIN m_prj_task ON (m_prj_task_list.id = m_prj_task.tasklistid AND m_prj_task.status='Open' AND m_prj_task.parentTaskId IS NULL)
                        LEFT OUTER JOIN s_user AS taskUser ON (taskUser.username = m_prj_task.assignUser)
        ]]>
    </sql>

    <sql id="orderStatement">
        ORDER BY
        #ifnotnull($_parameter.searchCriteria.orderByField)
        ${_parameter.searchCriteria.orderByField}
        ${_parameter.searchCriteria.sortDirection},
        #end
        m_prj_task_list.groupIndex, m_prj_task_list.lastUpdatedTime ASC
    </sql>

    <select id="getTotalCount" parameterType="TaskListSearchCriteria"
        resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_prj_task_list

        #ifnotnull($_parameter.searchCriteria)
        #trimext("WHERE" "AND|OR")
        <include refid="querySearchCriteria" />
        #end
        #end
    </select>

    <select id="findPagableListByCriteria" parameterType="TaskListSearchCriteria"
        resultMap="SimpleTaskListResult" lang="velocity">

        <include refid="selectTaskList" />
        #ifnotnull($_parameter.searchCriteria)
        #trimext("WHERE" "AND|OR")
        <include refid="querySearchCriteria" />
        #end
        #end
        <include refid="orderStatement" />
    </select>

    <select id="findTaskListById" parameterType="java.lang.Integer"
        resultMap="SimpleTaskListResult" lang="velocity">
        <include refid="selectTaskList" />

        WHERE m_prj_task_list.id=@{taskListId, jdbcType=NUMERIC}
    </select>

    <select id="getNextItemKey" parameterType="map" resultType="java.lang.Integer"
        lang="velocity">
        SELECT MIN(id) FROM m_prj_task_list

        #trimext("WHERE" "AND|OR")
        <include refid="querySearchCriteria" />
        #end
    </select>

    <select id="getPreviousItemKey" parameterType="map"
        resultType="java.lang.Integer" lang="velocity">
        SELECT MAX(id) FROM m_prj_task_list

        #trimext("WHERE" "AND|OR")
        <include refid="querySearchCriteria" />
        #end
    </select>
</mapper>