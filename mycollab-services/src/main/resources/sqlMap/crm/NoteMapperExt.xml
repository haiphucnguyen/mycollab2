<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.esofthead.mycollab.module.crm.dao.NoteMapperExt">
    <resultMap
        extends="com.esofthead.mycollab.module.crm.dao.NoteMapper.ResultMapWithBLOBs"
        id="SimpleNoteResult" type="com.esofthead.mycollab.module.crm.domain.SimpleNote">
        <result column="contactName" jdbcType="VARCHAR" property="contactName" />

        <result column="createdUserAvatarId" jdbcType="VARCHAR"
            property="createdUserAvatarId" />

        <result column="createUserFullName" jdbcType="VARCHAR"
            property="createUserFullName" />

        <collection property="comments" notNullColumn="id"
            ofType="com.esofthead.mycollab.common.domain.SimpleComment"
            resultMap="com.esofthead.mycollab.common.dao.CommentMapperExt.BaseResultMap"
            columnPrefix="comment_" />
    </resultMap>

    <sql id="querySearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.type)
            ${searchCriteria.type.operation} m_crm_note.type = @{searchCriteria.type.value}
        #end
        
        #ifnotnull($searchCriteria.typeid)
            ${searchCriteria.type.operation} m_crm_note.typeid = @{searchCriteria.typeid.value}
        #end
        ]]>
    </sql>

    <sql id="selectSimpleNote">
        <![CDATA[
        SELECT m_crm_note.id, m_crm_note.subject, m_crm_note.note, m_crm_note.type, m_crm_note.typeid, m_crm_note.createdTime, 
            m_crm_note.createdUser, m_crm_note.sAccountId, m_crm_note.lastUpdatedTime,
            s_user.avatarId AS createdUserAvatarId,
            LTRIM(concat(s_user.firstname, ' ', LTRIM(concat(IFNULL(s_user.middlename, ''), ' ')), s_user.lastname)) as createUserFullName,
            m_comment.id AS comment_id, m_comment.comment as comment_comment, m_comment.createdUser as comment_createdUser, 
            m_comment.createdTime as comment_createdTime, m_comment.type as comment_type, m_comment.typeId as comment_typeid, 
            m_comment.sAccountId as comment_sAccountId, 
            user_comment.avatarId AS comment_ownerAvatarId,
            LTRIM(concat(user_comment.firstname, ' ', LTRIM(concat(IFNULL(user_comment.middlename, ''), ' ')), user_comment.lastname)) as comment_ownerFullName
            
        FROM m_crm_note
            LEFT OUTER JOIN s_user ON (m_crm_note.createdUser = s_user.username) 
            LEFT OUTER JOIN m_comment ON (m_comment.type='Crm-Note' AND m_comment.typeid=m_crm_note.id)
            LEFT OUTER JOIN s_user AS user_comment ON (m_comment.createdUser=user_comment.username)
        ]]>
    </sql>

    <sql id="orderStatement">
        ORDER BY
        #ifnotnull($_parameter.searchCriteria.orderFields)
            #repeat(${_parameter.searchCriteria.orderFields} $orderField "" "" "")
                ${orderField.field} ${orderField.direction},
            #end
        #end
        m_crm_note.createdTime DESC
    </sql>

    <select id="findPagableListByCriteria" parameterType="NoteSearchCriteria"
        resultMap="SimpleNoteResult" lang="velocity">
        <include refid="selectSimpleNote" />
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end
        <include refid="orderStatement" />

    </select>

    <select id="getTotalCount" parameterType="NoteSearchCriteria"
        resultType="java.lang.Integer" lang="velocity">
        SELECT count(*) as totalCount FROM m_crm_note
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="querySearchCriteria" />
            #end
        #end
    </select>
</mapper>